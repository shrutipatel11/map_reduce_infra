// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class FShard;
class FShardDefaultTypeInternal;
extern FShardDefaultTypeInternal _FShard_default_instance_;
class FilePaths;
class FilePathsDefaultTypeInternal;
extern FilePathsDefaultTypeInternal _FilePaths_default_instance_;
class MapRequest;
class MapRequestDefaultTypeInternal;
extern MapRequestDefaultTypeInternal _MapRequest_default_instance_;
class MasterRequest;
class MasterRequestDefaultTypeInternal;
extern MasterRequestDefaultTypeInternal _MasterRequest_default_instance_;
class ReduceRequest;
class ReduceRequestDefaultTypeInternal;
extern ReduceRequestDefaultTypeInternal _ReduceRequest_default_instance_;
class ShardInfo;
class ShardInfoDefaultTypeInternal;
extern ShardInfoDefaultTypeInternal _ShardInfo_default_instance_;
class WorkerResponse;
class WorkerResponseDefaultTypeInternal;
extern WorkerResponseDefaultTypeInternal _WorkerResponse_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::FShard* Arena::CreateMaybeMessage<::masterworker::FShard>(Arena*);
template<> ::masterworker::FilePaths* Arena::CreateMaybeMessage<::masterworker::FilePaths>(Arena*);
template<> ::masterworker::MapRequest* Arena::CreateMaybeMessage<::masterworker::MapRequest>(Arena*);
template<> ::masterworker::MasterRequest* Arena::CreateMaybeMessage<::masterworker::MasterRequest>(Arena*);
template<> ::masterworker::ReduceRequest* Arena::CreateMaybeMessage<::masterworker::ReduceRequest>(Arena*);
template<> ::masterworker::ShardInfo* Arena::CreateMaybeMessage<::masterworker::ShardInfo>(Arena*);
template<> ::masterworker::WorkerResponse* Arena::CreateMaybeMessage<::masterworker::WorkerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

// ===================================================================

class FShard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.FShard) */ {
 public:
  inline FShard() : FShard(nullptr) {}
  virtual ~FShard();

  FShard(const FShard& from);
  FShard(FShard&& from) noexcept
    : FShard() {
    *this = ::std::move(from);
  }

  inline FShard& operator=(const FShard& from) {
    CopyFrom(from);
    return *this;
  }
  inline FShard& operator=(FShard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FShard& default_instance();

  static inline const FShard* internal_default_instance() {
    return reinterpret_cast<const FShard*>(
               &_FShard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FShard& a, FShard& b) {
    a.Swap(&b);
  }
  inline void Swap(FShard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FShard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FShard* New() const final {
    return CreateMaybeMessage<FShard>(nullptr);
  }

  FShard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FShard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FShard& from);
  void MergeFrom(const FShard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FShard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.FShard";
  }
  protected:
  explicit FShard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kShardIdFieldNumber = 1,
  };
  // repeated .masterworker.ShardInfo info = 2;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::masterworker::ShardInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >*
      mutable_info();
  private:
  const ::masterworker::ShardInfo& _internal_info(int index) const;
  ::masterworker::ShardInfo* _internal_add_info();
  public:
  const ::masterworker::ShardInfo& info(int index) const;
  ::masterworker::ShardInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >&
      info() const;

  // int32 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.FShard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo > info_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ShardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ShardInfo) */ {
 public:
  inline ShardInfo() : ShardInfo(nullptr) {}
  virtual ~ShardInfo();

  ShardInfo(const ShardInfo& from);
  ShardInfo(ShardInfo&& from) noexcept
    : ShardInfo() {
    *this = ::std::move(from);
  }

  inline ShardInfo& operator=(const ShardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInfo& operator=(ShardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardInfo& default_instance();

  static inline const ShardInfo* internal_default_instance() {
    return reinterpret_cast<const ShardInfo*>(
               &_ShardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShardInfo& a, ShardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardInfo* New() const final {
    return CreateMaybeMessage<ShardInfo>(nullptr);
  }

  ShardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardInfo& from);
  void MergeFrom(const ShardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ShardInfo";
  }
  protected:
  explicit ShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFNameFieldNumber = 1,
    kStartsAtFieldNumber = 2,
    kEndsAtFieldNumber = 3,
  };
  // string f_name = 1;
  void clear_f_name();
  const std::string& f_name() const;
  void set_f_name(const std::string& value);
  void set_f_name(std::string&& value);
  void set_f_name(const char* value);
  void set_f_name(const char* value, size_t size);
  std::string* mutable_f_name();
  std::string* release_f_name();
  void set_allocated_f_name(std::string* f_name);
  private:
  const std::string& _internal_f_name() const;
  void _internal_set_f_name(const std::string& value);
  std::string* _internal_mutable_f_name();
  public:

  // int32 starts_at = 2;
  void clear_starts_at();
  ::PROTOBUF_NAMESPACE_ID::int32 starts_at() const;
  void set_starts_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_starts_at() const;
  void _internal_set_starts_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ends_at = 3;
  void clear_ends_at();
  ::PROTOBUF_NAMESPACE_ID::int32 ends_at() const;
  void set_ends_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ends_at() const;
  void _internal_set_ends_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ShardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 starts_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 ends_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class MapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MapRequest) */ {
 public:
  inline MapRequest() : MapRequest(nullptr) {}
  virtual ~MapRequest();

  MapRequest(const MapRequest& from);
  MapRequest(MapRequest&& from) noexcept
    : MapRequest() {
    *this = ::std::move(from);
  }

  inline MapRequest& operator=(const MapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRequest& operator=(MapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapRequest& default_instance();

  static inline const MapRequest* internal_default_instance() {
    return reinterpret_cast<const MapRequest*>(
               &_MapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapRequest& a, MapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapRequest* New() const final {
    return CreateMaybeMessage<MapRequest>(nullptr);
  }

  MapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapRequest& from);
  void MergeFrom(const MapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MapRequest";
  }
  protected:
  explicit MapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardFieldNumber = 1,
  };
  // .masterworker.FShard shard = 1;
  bool has_shard() const;
  private:
  bool _internal_has_shard() const;
  public:
  void clear_shard();
  const ::masterworker::FShard& shard() const;
  ::masterworker::FShard* release_shard();
  ::masterworker::FShard* mutable_shard();
  void set_allocated_shard(::masterworker::FShard* shard);
  private:
  const ::masterworker::FShard& _internal_shard() const;
  ::masterworker::FShard* _internal_mutable_shard();
  public:
  void unsafe_arena_set_allocated_shard(
      ::masterworker::FShard* shard);
  ::masterworker::FShard* unsafe_arena_release_shard();

  // @@protoc_insertion_point(class_scope:masterworker.MapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::masterworker::FShard* shard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class ReduceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.ReduceRequest) */ {
 public:
  inline ReduceRequest() : ReduceRequest(nullptr) {}
  virtual ~ReduceRequest();

  ReduceRequest(const ReduceRequest& from);
  ReduceRequest(ReduceRequest&& from) noexcept
    : ReduceRequest() {
    *this = ::std::move(from);
  }

  inline ReduceRequest& operator=(const ReduceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReduceRequest& operator=(ReduceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReduceRequest& default_instance();

  static inline const ReduceRequest* internal_default_instance() {
    return reinterpret_cast<const ReduceRequest*>(
               &_ReduceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReduceRequest& a, ReduceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReduceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReduceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReduceRequest* New() const final {
    return CreateMaybeMessage<ReduceRequest>(nullptr);
  }

  ReduceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReduceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReduceRequest& from);
  void MergeFrom(const ReduceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReduceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.ReduceRequest";
  }
  protected:
  explicit ReduceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutDirFieldNumber = 3,
    kPathsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string out_dir = 3;
  void clear_out_dir();
  const std::string& out_dir() const;
  void set_out_dir(const std::string& value);
  void set_out_dir(std::string&& value);
  void set_out_dir(const char* value);
  void set_out_dir(const char* value, size_t size);
  std::string* mutable_out_dir();
  std::string* release_out_dir();
  void set_allocated_out_dir(std::string* out_dir);
  private:
  const std::string& _internal_out_dir() const;
  void _internal_set_out_dir(const std::string& value);
  std::string* _internal_mutable_out_dir();
  public:

  // .masterworker.FilePaths paths = 2;
  bool has_paths() const;
  private:
  bool _internal_has_paths() const;
  public:
  void clear_paths();
  const ::masterworker::FilePaths& paths() const;
  ::masterworker::FilePaths* release_paths();
  ::masterworker::FilePaths* mutable_paths();
  void set_allocated_paths(::masterworker::FilePaths* paths);
  private:
  const ::masterworker::FilePaths& _internal_paths() const;
  ::masterworker::FilePaths* _internal_mutable_paths();
  public:
  void unsafe_arena_set_allocated_paths(
      ::masterworker::FilePaths* paths);
  ::masterworker::FilePaths* unsafe_arena_release_paths();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.ReduceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr out_dir_;
  ::masterworker::FilePaths* paths_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class FilePaths PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.FilePaths) */ {
 public:
  inline FilePaths() : FilePaths(nullptr) {}
  virtual ~FilePaths();

  FilePaths(const FilePaths& from);
  FilePaths(FilePaths&& from) noexcept
    : FilePaths() {
    *this = ::std::move(from);
  }

  inline FilePaths& operator=(const FilePaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePaths& operator=(FilePaths&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePaths& default_instance();

  static inline const FilePaths* internal_default_instance() {
    return reinterpret_cast<const FilePaths*>(
               &_FilePaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FilePaths& a, FilePaths& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePaths* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePaths* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePaths* New() const final {
    return CreateMaybeMessage<FilePaths>(nullptr);
  }

  FilePaths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePaths>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePaths& from);
  void MergeFrom(const FilePaths& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePaths* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.FilePaths";
  }
  protected:
  explicit FilePaths(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFNameFieldNumber = 1,
  };
  // repeated string f_name = 1;
  int f_name_size() const;
  private:
  int _internal_f_name_size() const;
  public:
  void clear_f_name();
  const std::string& f_name(int index) const;
  std::string* mutable_f_name(int index);
  void set_f_name(int index, const std::string& value);
  void set_f_name(int index, std::string&& value);
  void set_f_name(int index, const char* value);
  void set_f_name(int index, const char* value, size_t size);
  std::string* add_f_name();
  void add_f_name(const std::string& value);
  void add_f_name(std::string&& value);
  void add_f_name(const char* value);
  void add_f_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f_name();
  private:
  const std::string& _internal_f_name(int index) const;
  std::string* _internal_add_f_name();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.FilePaths)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class MasterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.MasterRequest) */ {
 public:
  inline MasterRequest() : MasterRequest(nullptr) {}
  virtual ~MasterRequest();

  MasterRequest(const MasterRequest& from);
  MasterRequest(MasterRequest&& from) noexcept
    : MasterRequest() {
    *this = ::std::move(from);
  }

  inline MasterRequest& operator=(const MasterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterRequest& operator=(MasterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MasterRequest& default_instance();

  static inline const MasterRequest* internal_default_instance() {
    return reinterpret_cast<const MasterRequest*>(
               &_MasterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MasterRequest& a, MasterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MasterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterRequest* New() const final {
    return CreateMaybeMessage<MasterRequest>(nullptr);
  }

  MasterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterRequest& from);
  void MergeFrom(const MasterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.MasterRequest";
  }
  protected:
  explicit MasterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhaseFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kMapRequestFieldNumber = 1,
    kReduceRequestFieldNumber = 2,
  };
  // string phase = 3;
  void clear_phase();
  const std::string& phase() const;
  void set_phase(const std::string& value);
  void set_phase(std::string&& value);
  void set_phase(const char* value);
  void set_phase(const char* value, size_t size);
  std::string* mutable_phase();
  std::string* release_phase();
  void set_allocated_phase(std::string* phase);
  private:
  const std::string& _internal_phase() const;
  void _internal_set_phase(const std::string& value);
  std::string* _internal_mutable_phase();
  public:

  // string user_id = 4;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .masterworker.MapRequest map_request = 1;
  bool has_map_request() const;
  private:
  bool _internal_has_map_request() const;
  public:
  void clear_map_request();
  const ::masterworker::MapRequest& map_request() const;
  ::masterworker::MapRequest* release_map_request();
  ::masterworker::MapRequest* mutable_map_request();
  void set_allocated_map_request(::masterworker::MapRequest* map_request);
  private:
  const ::masterworker::MapRequest& _internal_map_request() const;
  ::masterworker::MapRequest* _internal_mutable_map_request();
  public:
  void unsafe_arena_set_allocated_map_request(
      ::masterworker::MapRequest* map_request);
  ::masterworker::MapRequest* unsafe_arena_release_map_request();

  // .masterworker.ReduceRequest reduce_request = 2;
  bool has_reduce_request() const;
  private:
  bool _internal_has_reduce_request() const;
  public:
  void clear_reduce_request();
  const ::masterworker::ReduceRequest& reduce_request() const;
  ::masterworker::ReduceRequest* release_reduce_request();
  ::masterworker::ReduceRequest* mutable_reduce_request();
  void set_allocated_reduce_request(::masterworker::ReduceRequest* reduce_request);
  private:
  const ::masterworker::ReduceRequest& _internal_reduce_request() const;
  ::masterworker::ReduceRequest* _internal_mutable_reduce_request();
  public:
  void unsafe_arena_set_allocated_reduce_request(
      ::masterworker::ReduceRequest* reduce_request);
  ::masterworker::ReduceRequest* unsafe_arena_release_reduce_request();

  // @@protoc_insertion_point(class_scope:masterworker.MasterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::masterworker::MapRequest* map_request_;
  ::masterworker::ReduceRequest* reduce_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class WorkerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.WorkerResponse) */ {
 public:
  inline WorkerResponse() : WorkerResponse(nullptr) {}
  virtual ~WorkerResponse();

  WorkerResponse(const WorkerResponse& from);
  WorkerResponse(WorkerResponse&& from) noexcept
    : WorkerResponse() {
    *this = ::std::move(from);
  }

  inline WorkerResponse& operator=(const WorkerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerResponse& operator=(WorkerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkerResponse& default_instance();

  static inline const WorkerResponse* internal_default_instance() {
    return reinterpret_cast<const WorkerResponse*>(
               &_WorkerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WorkerResponse& a, WorkerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkerResponse* New() const final {
    return CreateMaybeMessage<WorkerResponse>(nullptr);
  }

  WorkerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkerResponse& from);
  void MergeFrom(const WorkerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.WorkerResponse";
  }
  protected:
  explicit WorkerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 1,
  };
  // .masterworker.FilePaths paths = 1;
  bool has_paths() const;
  private:
  bool _internal_has_paths() const;
  public:
  void clear_paths();
  const ::masterworker::FilePaths& paths() const;
  ::masterworker::FilePaths* release_paths();
  ::masterworker::FilePaths* mutable_paths();
  void set_allocated_paths(::masterworker::FilePaths* paths);
  private:
  const ::masterworker::FilePaths& _internal_paths() const;
  ::masterworker::FilePaths* _internal_mutable_paths();
  public:
  void unsafe_arena_set_allocated_paths(
      ::masterworker::FilePaths* paths);
  ::masterworker::FilePaths* unsafe_arena_release_paths();

  // @@protoc_insertion_point(class_scope:masterworker.WorkerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::masterworker::FilePaths* paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FShard

// int32 shard_id = 1;
inline void FShard::clear_shard_id() {
  shard_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FShard::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FShard::shard_id() const {
  // @@protoc_insertion_point(field_get:masterworker.FShard.shard_id)
  return _internal_shard_id();
}
inline void FShard::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shard_id_ = value;
}
inline void FShard::set_shard_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:masterworker.FShard.shard_id)
}

// repeated .masterworker.ShardInfo info = 2;
inline int FShard::_internal_info_size() const {
  return info_.size();
}
inline int FShard::info_size() const {
  return _internal_info_size();
}
inline void FShard::clear_info() {
  info_.Clear();
}
inline ::masterworker::ShardInfo* FShard::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.FShard.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >*
FShard::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.FShard.info)
  return &info_;
}
inline const ::masterworker::ShardInfo& FShard::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::masterworker::ShardInfo& FShard::info(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.FShard.info)
  return _internal_info(index);
}
inline ::masterworker::ShardInfo* FShard::_internal_add_info() {
  return info_.Add();
}
inline ::masterworker::ShardInfo* FShard::add_info() {
  // @@protoc_insertion_point(field_add:masterworker.FShard.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::ShardInfo >&
FShard::info() const {
  // @@protoc_insertion_point(field_list:masterworker.FShard.info)
  return info_;
}

// -------------------------------------------------------------------

// ShardInfo

// string f_name = 1;
inline void ShardInfo::clear_f_name() {
  f_name_.ClearToEmpty();
}
inline const std::string& ShardInfo::f_name() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.f_name)
  return _internal_f_name();
}
inline void ShardInfo::set_f_name(const std::string& value) {
  _internal_set_f_name(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.f_name)
}
inline std::string* ShardInfo::mutable_f_name() {
  // @@protoc_insertion_point(field_mutable:masterworker.ShardInfo.f_name)
  return _internal_mutable_f_name();
}
inline const std::string& ShardInfo::_internal_f_name() const {
  return f_name_.Get();
}
inline void ShardInfo::_internal_set_f_name(const std::string& value) {
  
  f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShardInfo::set_f_name(std::string&& value) {
  
  f_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.ShardInfo.f_name)
}
inline void ShardInfo::set_f_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.ShardInfo.f_name)
}
inline void ShardInfo::set_f_name(const char* value,
    size_t size) {
  
  f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.ShardInfo.f_name)
}
inline std::string* ShardInfo::_internal_mutable_f_name() {
  
  return f_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShardInfo::release_f_name() {
  // @@protoc_insertion_point(field_release:masterworker.ShardInfo.f_name)
  return f_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardInfo::set_allocated_f_name(std::string* f_name) {
  if (f_name != nullptr) {
    
  } else {
    
  }
  f_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.ShardInfo.f_name)
}

// int32 starts_at = 2;
inline void ShardInfo::clear_starts_at() {
  starts_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::_internal_starts_at() const {
  return starts_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::starts_at() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.starts_at)
  return _internal_starts_at();
}
inline void ShardInfo::_internal_set_starts_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starts_at_ = value;
}
inline void ShardInfo::set_starts_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_starts_at(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.starts_at)
}

// int32 ends_at = 3;
inline void ShardInfo::clear_ends_at() {
  ends_at_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::_internal_ends_at() const {
  return ends_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardInfo::ends_at() const {
  // @@protoc_insertion_point(field_get:masterworker.ShardInfo.ends_at)
  return _internal_ends_at();
}
inline void ShardInfo::_internal_set_ends_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ends_at_ = value;
}
inline void ShardInfo::set_ends_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ends_at(value);
  // @@protoc_insertion_point(field_set:masterworker.ShardInfo.ends_at)
}

// -------------------------------------------------------------------

// MapRequest

// .masterworker.FShard shard = 1;
inline bool MapRequest::_internal_has_shard() const {
  return this != internal_default_instance() && shard_ != nullptr;
}
inline bool MapRequest::has_shard() const {
  return _internal_has_shard();
}
inline void MapRequest::clear_shard() {
  if (GetArena() == nullptr && shard_ != nullptr) {
    delete shard_;
  }
  shard_ = nullptr;
}
inline const ::masterworker::FShard& MapRequest::_internal_shard() const {
  const ::masterworker::FShard* p = shard_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::FShard&>(
      ::masterworker::_FShard_default_instance_);
}
inline const ::masterworker::FShard& MapRequest::shard() const {
  // @@protoc_insertion_point(field_get:masterworker.MapRequest.shard)
  return _internal_shard();
}
inline void MapRequest::unsafe_arena_set_allocated_shard(
    ::masterworker::FShard* shard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shard_);
  }
  shard_ = shard;
  if (shard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.MapRequest.shard)
}
inline ::masterworker::FShard* MapRequest::release_shard() {
  
  ::masterworker::FShard* temp = shard_;
  shard_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::FShard* MapRequest::unsafe_arena_release_shard() {
  // @@protoc_insertion_point(field_release:masterworker.MapRequest.shard)
  
  ::masterworker::FShard* temp = shard_;
  shard_ = nullptr;
  return temp;
}
inline ::masterworker::FShard* MapRequest::_internal_mutable_shard() {
  
  if (shard_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::FShard>(GetArena());
    shard_ = p;
  }
  return shard_;
}
inline ::masterworker::FShard* MapRequest::mutable_shard() {
  // @@protoc_insertion_point(field_mutable:masterworker.MapRequest.shard)
  return _internal_mutable_shard();
}
inline void MapRequest::set_allocated_shard(::masterworker::FShard* shard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shard_;
  }
  if (shard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shard);
    if (message_arena != submessage_arena) {
      shard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shard, submessage_arena);
    }
    
  } else {
    
  }
  shard_ = shard;
  // @@protoc_insertion_point(field_set_allocated:masterworker.MapRequest.shard)
}

// -------------------------------------------------------------------

// ReduceRequest

// int32 id = 1;
inline void ReduceRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReduceRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReduceRequest::id() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.id)
  return _internal_id();
}
inline void ReduceRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ReduceRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.id)
}

// .masterworker.FilePaths paths = 2;
inline bool ReduceRequest::_internal_has_paths() const {
  return this != internal_default_instance() && paths_ != nullptr;
}
inline bool ReduceRequest::has_paths() const {
  return _internal_has_paths();
}
inline void ReduceRequest::clear_paths() {
  if (GetArena() == nullptr && paths_ != nullptr) {
    delete paths_;
  }
  paths_ = nullptr;
}
inline const ::masterworker::FilePaths& ReduceRequest::_internal_paths() const {
  const ::masterworker::FilePaths* p = paths_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::FilePaths&>(
      ::masterworker::_FilePaths_default_instance_);
}
inline const ::masterworker::FilePaths& ReduceRequest::paths() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.paths)
  return _internal_paths();
}
inline void ReduceRequest::unsafe_arena_set_allocated_paths(
    ::masterworker::FilePaths* paths) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paths_);
  }
  paths_ = paths;
  if (paths) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.ReduceRequest.paths)
}
inline ::masterworker::FilePaths* ReduceRequest::release_paths() {
  
  ::masterworker::FilePaths* temp = paths_;
  paths_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::FilePaths* ReduceRequest::unsafe_arena_release_paths() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceRequest.paths)
  
  ::masterworker::FilePaths* temp = paths_;
  paths_ = nullptr;
  return temp;
}
inline ::masterworker::FilePaths* ReduceRequest::_internal_mutable_paths() {
  
  if (paths_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::FilePaths>(GetArena());
    paths_ = p;
  }
  return paths_;
}
inline ::masterworker::FilePaths* ReduceRequest::mutable_paths() {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceRequest.paths)
  return _internal_mutable_paths();
}
inline void ReduceRequest::set_allocated_paths(::masterworker::FilePaths* paths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete paths_;
  }
  if (paths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(paths);
    if (message_arena != submessage_arena) {
      paths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paths, submessage_arena);
    }
    
  } else {
    
  }
  paths_ = paths;
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceRequest.paths)
}

// string out_dir = 3;
inline void ReduceRequest::clear_out_dir() {
  out_dir_.ClearToEmpty();
}
inline const std::string& ReduceRequest::out_dir() const {
  // @@protoc_insertion_point(field_get:masterworker.ReduceRequest.out_dir)
  return _internal_out_dir();
}
inline void ReduceRequest::set_out_dir(const std::string& value) {
  _internal_set_out_dir(value);
  // @@protoc_insertion_point(field_set:masterworker.ReduceRequest.out_dir)
}
inline std::string* ReduceRequest::mutable_out_dir() {
  // @@protoc_insertion_point(field_mutable:masterworker.ReduceRequest.out_dir)
  return _internal_mutable_out_dir();
}
inline const std::string& ReduceRequest::_internal_out_dir() const {
  return out_dir_.Get();
}
inline void ReduceRequest::_internal_set_out_dir(const std::string& value) {
  
  out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReduceRequest::set_out_dir(std::string&& value) {
  
  out_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.ReduceRequest.out_dir)
}
inline void ReduceRequest::set_out_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.ReduceRequest.out_dir)
}
inline void ReduceRequest::set_out_dir(const char* value,
    size_t size) {
  
  out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.ReduceRequest.out_dir)
}
inline std::string* ReduceRequest::_internal_mutable_out_dir() {
  
  return out_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReduceRequest::release_out_dir() {
  // @@protoc_insertion_point(field_release:masterworker.ReduceRequest.out_dir)
  return out_dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReduceRequest::set_allocated_out_dir(std::string* out_dir) {
  if (out_dir != nullptr) {
    
  } else {
    
  }
  out_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), out_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.ReduceRequest.out_dir)
}

// -------------------------------------------------------------------

// FilePaths

// repeated string f_name = 1;
inline int FilePaths::_internal_f_name_size() const {
  return f_name_.size();
}
inline int FilePaths::f_name_size() const {
  return _internal_f_name_size();
}
inline void FilePaths::clear_f_name() {
  f_name_.Clear();
}
inline std::string* FilePaths::add_f_name() {
  // @@protoc_insertion_point(field_add_mutable:masterworker.FilePaths.f_name)
  return _internal_add_f_name();
}
inline const std::string& FilePaths::_internal_f_name(int index) const {
  return f_name_.Get(index);
}
inline const std::string& FilePaths::f_name(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.FilePaths.f_name)
  return _internal_f_name(index);
}
inline std::string* FilePaths::mutable_f_name(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.FilePaths.f_name)
  return f_name_.Mutable(index);
}
inline void FilePaths::set_f_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:masterworker.FilePaths.f_name)
  f_name_.Mutable(index)->assign(value);
}
inline void FilePaths::set_f_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:masterworker.FilePaths.f_name)
  f_name_.Mutable(index)->assign(std::move(value));
}
inline void FilePaths::set_f_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.FilePaths.f_name)
}
inline void FilePaths::set_f_name(int index, const char* value, size_t size) {
  f_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.FilePaths.f_name)
}
inline std::string* FilePaths::_internal_add_f_name() {
  return f_name_.Add();
}
inline void FilePaths::add_f_name(const std::string& value) {
  f_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.FilePaths.f_name)
}
inline void FilePaths::add_f_name(std::string&& value) {
  f_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.FilePaths.f_name)
}
inline void FilePaths::add_f_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.FilePaths.f_name)
}
inline void FilePaths::add_f_name(const char* value, size_t size) {
  f_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.FilePaths.f_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FilePaths::f_name() const {
  // @@protoc_insertion_point(field_list:masterworker.FilePaths.f_name)
  return f_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FilePaths::mutable_f_name() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.FilePaths.f_name)
  return &f_name_;
}

// -------------------------------------------------------------------

// MasterRequest

// .masterworker.MapRequest map_request = 1;
inline bool MasterRequest::_internal_has_map_request() const {
  return this != internal_default_instance() && map_request_ != nullptr;
}
inline bool MasterRequest::has_map_request() const {
  return _internal_has_map_request();
}
inline void MasterRequest::clear_map_request() {
  if (GetArena() == nullptr && map_request_ != nullptr) {
    delete map_request_;
  }
  map_request_ = nullptr;
}
inline const ::masterworker::MapRequest& MasterRequest::_internal_map_request() const {
  const ::masterworker::MapRequest* p = map_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::MapRequest&>(
      ::masterworker::_MapRequest_default_instance_);
}
inline const ::masterworker::MapRequest& MasterRequest::map_request() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterRequest.map_request)
  return _internal_map_request();
}
inline void MasterRequest::unsafe_arena_set_allocated_map_request(
    ::masterworker::MapRequest* map_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_request_);
  }
  map_request_ = map_request;
  if (map_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.MasterRequest.map_request)
}
inline ::masterworker::MapRequest* MasterRequest::release_map_request() {
  
  ::masterworker::MapRequest* temp = map_request_;
  map_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::MapRequest* MasterRequest::unsafe_arena_release_map_request() {
  // @@protoc_insertion_point(field_release:masterworker.MasterRequest.map_request)
  
  ::masterworker::MapRequest* temp = map_request_;
  map_request_ = nullptr;
  return temp;
}
inline ::masterworker::MapRequest* MasterRequest::_internal_mutable_map_request() {
  
  if (map_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::MapRequest>(GetArena());
    map_request_ = p;
  }
  return map_request_;
}
inline ::masterworker::MapRequest* MasterRequest::mutable_map_request() {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterRequest.map_request)
  return _internal_mutable_map_request();
}
inline void MasterRequest::set_allocated_map_request(::masterworker::MapRequest* map_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_request_;
  }
  if (map_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_request);
    if (message_arena != submessage_arena) {
      map_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_request, submessage_arena);
    }
    
  } else {
    
  }
  map_request_ = map_request;
  // @@protoc_insertion_point(field_set_allocated:masterworker.MasterRequest.map_request)
}

// .masterworker.ReduceRequest reduce_request = 2;
inline bool MasterRequest::_internal_has_reduce_request() const {
  return this != internal_default_instance() && reduce_request_ != nullptr;
}
inline bool MasterRequest::has_reduce_request() const {
  return _internal_has_reduce_request();
}
inline void MasterRequest::clear_reduce_request() {
  if (GetArena() == nullptr && reduce_request_ != nullptr) {
    delete reduce_request_;
  }
  reduce_request_ = nullptr;
}
inline const ::masterworker::ReduceRequest& MasterRequest::_internal_reduce_request() const {
  const ::masterworker::ReduceRequest* p = reduce_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::ReduceRequest&>(
      ::masterworker::_ReduceRequest_default_instance_);
}
inline const ::masterworker::ReduceRequest& MasterRequest::reduce_request() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterRequest.reduce_request)
  return _internal_reduce_request();
}
inline void MasterRequest::unsafe_arena_set_allocated_reduce_request(
    ::masterworker::ReduceRequest* reduce_request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reduce_request_);
  }
  reduce_request_ = reduce_request;
  if (reduce_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.MasterRequest.reduce_request)
}
inline ::masterworker::ReduceRequest* MasterRequest::release_reduce_request() {
  
  ::masterworker::ReduceRequest* temp = reduce_request_;
  reduce_request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::ReduceRequest* MasterRequest::unsafe_arena_release_reduce_request() {
  // @@protoc_insertion_point(field_release:masterworker.MasterRequest.reduce_request)
  
  ::masterworker::ReduceRequest* temp = reduce_request_;
  reduce_request_ = nullptr;
  return temp;
}
inline ::masterworker::ReduceRequest* MasterRequest::_internal_mutable_reduce_request() {
  
  if (reduce_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::ReduceRequest>(GetArena());
    reduce_request_ = p;
  }
  return reduce_request_;
}
inline ::masterworker::ReduceRequest* MasterRequest::mutable_reduce_request() {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterRequest.reduce_request)
  return _internal_mutable_reduce_request();
}
inline void MasterRequest::set_allocated_reduce_request(::masterworker::ReduceRequest* reduce_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reduce_request_;
  }
  if (reduce_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reduce_request);
    if (message_arena != submessage_arena) {
      reduce_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduce_request, submessage_arena);
    }
    
  } else {
    
  }
  reduce_request_ = reduce_request;
  // @@protoc_insertion_point(field_set_allocated:masterworker.MasterRequest.reduce_request)
}

// string phase = 3;
inline void MasterRequest::clear_phase() {
  phase_.ClearToEmpty();
}
inline const std::string& MasterRequest::phase() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterRequest.phase)
  return _internal_phase();
}
inline void MasterRequest::set_phase(const std::string& value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:masterworker.MasterRequest.phase)
}
inline std::string* MasterRequest::mutable_phase() {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterRequest.phase)
  return _internal_mutable_phase();
}
inline const std::string& MasterRequest::_internal_phase() const {
  return phase_.Get();
}
inline void MasterRequest::_internal_set_phase(const std::string& value) {
  
  phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MasterRequest::set_phase(std::string&& value) {
  
  phase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MasterRequest.phase)
}
inline void MasterRequest::set_phase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MasterRequest.phase)
}
inline void MasterRequest::set_phase(const char* value,
    size_t size) {
  
  phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MasterRequest.phase)
}
inline std::string* MasterRequest::_internal_mutable_phase() {
  
  return phase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MasterRequest::release_phase() {
  // @@protoc_insertion_point(field_release:masterworker.MasterRequest.phase)
  return phase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MasterRequest::set_allocated_phase(std::string* phase) {
  if (phase != nullptr) {
    
  } else {
    
  }
  phase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MasterRequest.phase)
}

// string user_id = 4;
inline void MasterRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& MasterRequest::user_id() const {
  // @@protoc_insertion_point(field_get:masterworker.MasterRequest.user_id)
  return _internal_user_id();
}
inline void MasterRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:masterworker.MasterRequest.user_id)
}
inline std::string* MasterRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:masterworker.MasterRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& MasterRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void MasterRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MasterRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.MasterRequest.user_id)
}
inline void MasterRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.MasterRequest.user_id)
}
inline void MasterRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.MasterRequest.user_id)
}
inline std::string* MasterRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MasterRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:masterworker.MasterRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MasterRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.MasterRequest.user_id)
}

// -------------------------------------------------------------------

// WorkerResponse

// .masterworker.FilePaths paths = 1;
inline bool WorkerResponse::_internal_has_paths() const {
  return this != internal_default_instance() && paths_ != nullptr;
}
inline bool WorkerResponse::has_paths() const {
  return _internal_has_paths();
}
inline void WorkerResponse::clear_paths() {
  if (GetArena() == nullptr && paths_ != nullptr) {
    delete paths_;
  }
  paths_ = nullptr;
}
inline const ::masterworker::FilePaths& WorkerResponse::_internal_paths() const {
  const ::masterworker::FilePaths* p = paths_;
  return p != nullptr ? *p : reinterpret_cast<const ::masterworker::FilePaths&>(
      ::masterworker::_FilePaths_default_instance_);
}
inline const ::masterworker::FilePaths& WorkerResponse::paths() const {
  // @@protoc_insertion_point(field_get:masterworker.WorkerResponse.paths)
  return _internal_paths();
}
inline void WorkerResponse::unsafe_arena_set_allocated_paths(
    ::masterworker::FilePaths* paths) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paths_);
  }
  paths_ = paths;
  if (paths) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.WorkerResponse.paths)
}
inline ::masterworker::FilePaths* WorkerResponse::release_paths() {
  
  ::masterworker::FilePaths* temp = paths_;
  paths_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::FilePaths* WorkerResponse::unsafe_arena_release_paths() {
  // @@protoc_insertion_point(field_release:masterworker.WorkerResponse.paths)
  
  ::masterworker::FilePaths* temp = paths_;
  paths_ = nullptr;
  return temp;
}
inline ::masterworker::FilePaths* WorkerResponse::_internal_mutable_paths() {
  
  if (paths_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::FilePaths>(GetArena());
    paths_ = p;
  }
  return paths_;
}
inline ::masterworker::FilePaths* WorkerResponse::mutable_paths() {
  // @@protoc_insertion_point(field_mutable:masterworker.WorkerResponse.paths)
  return _internal_mutable_paths();
}
inline void WorkerResponse::set_allocated_paths(::masterworker::FilePaths* paths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete paths_;
  }
  if (paths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(paths);
    if (message_arena != submessage_arena) {
      paths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paths, submessage_arena);
    }
    
  } else {
    
  }
  paths_ = paths;
  // @@protoc_insertion_point(field_set_allocated:masterworker.WorkerResponse.paths)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
