// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#include "masterworker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FShard_masterworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilePaths_masterworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapRequest_masterworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReduceRequest_masterworker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardInfo_masterworker_2eproto;
namespace masterworker {
class FShardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FShard> _instance;
} _FShard_default_instance_;
class ShardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardInfo> _instance;
} _ShardInfo_default_instance_;
class MapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRequest> _instance;
} _MapRequest_default_instance_;
class ReduceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReduceRequest> _instance;
} _ReduceRequest_default_instance_;
class FilePathsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilePaths> _instance;
} _FilePaths_default_instance_;
class MasterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterRequest> _instance;
} _MasterRequest_default_instance_;
class WorkerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerResponse> _instance;
} _WorkerResponse_default_instance_;
}  // namespace masterworker
static void InitDefaultsscc_info_FShard_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_FShard_default_instance_;
    new (ptr) ::masterworker::FShard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FShard_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FShard_masterworker_2eproto}, {
      &scc_info_ShardInfo_masterworker_2eproto.base,}};

static void InitDefaultsscc_info_FilePaths_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_FilePaths_default_instance_;
    new (ptr) ::masterworker::FilePaths();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilePaths_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilePaths_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_MapRequest_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_MapRequest_default_instance_;
    new (ptr) ::masterworker::MapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapRequest_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapRequest_masterworker_2eproto}, {
      &scc_info_FShard_masterworker_2eproto.base,}};

static void InitDefaultsscc_info_MasterRequest_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_MasterRequest_default_instance_;
    new (ptr) ::masterworker::MasterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MasterRequest_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MasterRequest_masterworker_2eproto}, {
      &scc_info_MapRequest_masterworker_2eproto.base,
      &scc_info_ReduceRequest_masterworker_2eproto.base,}};

static void InitDefaultsscc_info_ReduceRequest_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_ReduceRequest_default_instance_;
    new (ptr) ::masterworker::ReduceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReduceRequest_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReduceRequest_masterworker_2eproto}, {
      &scc_info_FilePaths_masterworker_2eproto.base,}};

static void InitDefaultsscc_info_ShardInfo_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_ShardInfo_default_instance_;
    new (ptr) ::masterworker::ShardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardInfo_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShardInfo_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_WorkerResponse_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_WorkerResponse_default_instance_;
    new (ptr) ::masterworker::WorkerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkerResponse_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkerResponse_masterworker_2eproto}, {
      &scc_info_FilePaths_masterworker_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_masterworker_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_masterworker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_masterworker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_masterworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::FShard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::FShard, shard_id_),
  PROTOBUF_FIELD_OFFSET(::masterworker::FShard, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, f_name_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, starts_at_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ShardInfo, ends_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::MapRequest, shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, id_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, paths_),
  PROTOBUF_FIELD_OFFSET(::masterworker::ReduceRequest, out_dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::FilePaths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::FilePaths, f_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterRequest, map_request_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterRequest, reduce_request_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterRequest, phase_),
  PROTOBUF_FIELD_OFFSET(::masterworker::MasterRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::WorkerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::WorkerResponse, paths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::masterworker::FShard)},
  { 7, -1, sizeof(::masterworker::ShardInfo)},
  { 15, -1, sizeof(::masterworker::MapRequest)},
  { 21, -1, sizeof(::masterworker::ReduceRequest)},
  { 29, -1, sizeof(::masterworker::FilePaths)},
  { 35, -1, sizeof(::masterworker::MasterRequest)},
  { 44, -1, sizeof(::masterworker::WorkerResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_FShard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_ShardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_MapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_ReduceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_FilePaths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_MasterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_WorkerResponse_default_instance_),
};

const char descriptor_table_protodef_masterworker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022masterworker.proto\022\014masterworker\"A\n\006FS"
  "hard\022\020\n\010shard_id\030\001 \001(\005\022%\n\004info\030\002 \003(\0132\027.m"
  "asterworker.ShardInfo\"\?\n\tShardInfo\022\016\n\006f_"
  "name\030\001 \001(\t\022\021\n\tstarts_at\030\002 \001(\005\022\017\n\007ends_at"
  "\030\003 \001(\005\"1\n\nMapRequest\022#\n\005shard\030\001 \001(\0132\024.ma"
  "sterworker.FShard\"T\n\rReduceRequest\022\n\n\002id"
  "\030\001 \001(\005\022&\n\005paths\030\002 \001(\0132\027.masterworker.Fil"
  "ePaths\022\017\n\007out_dir\030\003 \001(\t\"\033\n\tFilePaths\022\016\n\006"
  "f_name\030\001 \003(\t\"\223\001\n\rMasterRequest\022-\n\013map_re"
  "quest\030\001 \001(\0132\030.masterworker.MapRequest\0223\n"
  "\016reduce_request\030\002 \001(\0132\033.masterworker.Red"
  "uceRequest\022\r\n\005phase\030\003 \001(\t\022\017\n\007user_id\030\004 \001"
  "(\t\"8\n\016WorkerResponse\022&\n\005paths\030\001 \001(\0132\027.ma"
  "sterworker.FilePaths2`\n\rMasterMachine\022O\n"
  "\020mapReduceRequest\022\033.masterworker.MasterR"
  "equest\032\034.masterworker.WorkerResponse\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_masterworker_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_masterworker_2eproto_sccs[7] = {
  &scc_info_FShard_masterworker_2eproto.base,
  &scc_info_FilePaths_masterworker_2eproto.base,
  &scc_info_MapRequest_masterworker_2eproto.base,
  &scc_info_MasterRequest_masterworker_2eproto.base,
  &scc_info_ReduceRequest_masterworker_2eproto.base,
  &scc_info_ShardInfo_masterworker_2eproto.base,
  &scc_info_WorkerResponse_masterworker_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_masterworker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto = {
  false, false, descriptor_table_protodef_masterworker_2eproto, "masterworker.proto", 646,
  &descriptor_table_masterworker_2eproto_once, descriptor_table_masterworker_2eproto_sccs, descriptor_table_masterworker_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_masterworker_2eproto::offsets,
  file_level_metadata_masterworker_2eproto, 7, file_level_enum_descriptors_masterworker_2eproto, file_level_service_descriptors_masterworker_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_masterworker_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_masterworker_2eproto)), true);
namespace masterworker {

// ===================================================================

class FShard::_Internal {
 public:
};

FShard::FShard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.FShard)
}
FShard::FShard(const FShard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      info_(from.info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:masterworker.FShard)
}

void FShard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FShard_masterworker_2eproto.base);
  shard_id_ = 0;
}

FShard::~FShard() {
  // @@protoc_insertion_point(destructor:masterworker.FShard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FShard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FShard::ArenaDtor(void* object) {
  FShard* _this = reinterpret_cast< FShard* >(object);
  (void)_this;
}
void FShard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FShard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FShard& FShard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FShard_masterworker_2eproto.base);
  return *internal_default_instance();
}


void FShard::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.FShard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  shard_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FShard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .masterworker.ShardInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FShard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.FShard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shard_id = 1;
  if (this->shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shard_id(), target);
  }

  // repeated .masterworker.ShardInfo info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.FShard)
  return target;
}

size_t FShard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.FShard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .masterworker.ShardInfo info = 2;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 shard_id = 1;
  if (this->shard_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shard_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FShard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.FShard)
  GOOGLE_DCHECK_NE(&from, this);
  const FShard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FShard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.FShard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.FShard)
    MergeFrom(*source);
  }
}

void FShard::MergeFrom(const FShard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.FShard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  if (from.shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
}

void FShard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.FShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FShard::CopyFrom(const FShard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.FShard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FShard::IsInitialized() const {
  return true;
}

void FShard::InternalSwap(FShard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.InternalSwap(&other->info_);
  swap(shard_id_, other->shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FShard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShardInfo::_Internal {
 public:
};

ShardInfo::ShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.ShardInfo)
}
ShardInfo::ShardInfo(const ShardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  f_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_f_name().empty()) {
    f_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_f_name(), 
      GetArena());
  }
  ::memcpy(&starts_at_, &from.starts_at_,
    static_cast<size_t>(reinterpret_cast<char*>(&ends_at_) -
    reinterpret_cast<char*>(&starts_at_)) + sizeof(ends_at_));
  // @@protoc_insertion_point(copy_constructor:masterworker.ShardInfo)
}

void ShardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShardInfo_masterworker_2eproto.base);
  f_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&starts_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ends_at_) -
      reinterpret_cast<char*>(&starts_at_)) + sizeof(ends_at_));
}

ShardInfo::~ShardInfo() {
  // @@protoc_insertion_point(destructor:masterworker.ShardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  f_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShardInfo::ArenaDtor(void* object) {
  ShardInfo* _this = reinterpret_cast< ShardInfo* >(object);
  (void)_this;
}
void ShardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardInfo& ShardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardInfo_masterworker_2eproto.base);
  return *internal_default_instance();
}


void ShardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ShardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f_name_.ClearToEmpty();
  ::memset(&starts_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ends_at_) -
      reinterpret_cast<char*>(&starts_at_)) + sizeof(ends_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string f_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.ShardInfo.f_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 starts_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starts_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ends_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ends_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ShardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string f_name = 1;
  if (this->f_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_f_name().data(), static_cast<int>(this->_internal_f_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ShardInfo.f_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f_name(), target);
  }

  // int32 starts_at = 2;
  if (this->starts_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_starts_at(), target);
  }

  // int32 ends_at = 3;
  if (this->ends_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ends_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ShardInfo)
  return target;
}

size_t ShardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ShardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string f_name = 1;
  if (this->f_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f_name());
  }

  // int32 starts_at = 2;
  if (this->starts_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starts_at());
  }

  // int32 ends_at = 3;
  if (this->ends_at() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ends_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.ShardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.ShardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.ShardInfo)
    MergeFrom(*source);
  }
}

void ShardInfo::MergeFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ShardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.f_name().size() > 0) {
    _internal_set_f_name(from._internal_f_name());
  }
  if (from.starts_at() != 0) {
    _internal_set_starts_at(from._internal_starts_at());
  }
  if (from.ends_at() != 0) {
    _internal_set_ends_at(from._internal_ends_at());
  }
}

void ShardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfo::CopyFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfo::IsInitialized() const {
  return true;
}

void ShardInfo::InternalSwap(ShardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  f_name_.Swap(&other->f_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardInfo, ends_at_)
      + sizeof(ShardInfo::ends_at_)
      - PROTOBUF_FIELD_OFFSET(ShardInfo, starts_at_)>(
          reinterpret_cast<char*>(&starts_at_),
          reinterpret_cast<char*>(&other->starts_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MapRequest::_Internal {
 public:
  static const ::masterworker::FShard& shard(const MapRequest* msg);
};

const ::masterworker::FShard&
MapRequest::_Internal::shard(const MapRequest* msg) {
  return *msg->shard_;
}
MapRequest::MapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.MapRequest)
}
MapRequest::MapRequest(const MapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shard()) {
    shard_ = new ::masterworker::FShard(*from.shard_);
  } else {
    shard_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.MapRequest)
}

void MapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapRequest_masterworker_2eproto.base);
  shard_ = nullptr;
}

MapRequest::~MapRequest() {
  // @@protoc_insertion_point(destructor:masterworker.MapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shard_;
}

void MapRequest::ArenaDtor(void* object) {
  MapRequest* _this = reinterpret_cast< MapRequest* >(object);
  (void)_this;
}
void MapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRequest& MapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRequest_masterworker_2eproto.base);
  return *internal_default_instance();
}


void MapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shard_ != nullptr) {
    delete shard_;
  }
  shard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .masterworker.FShard shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .masterworker.FShard shard = 1;
  if (this->has_shard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shard(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MapRequest)
  return target;
}

size_t MapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .masterworker.FShard shard = 1;
  if (this->has_shard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shard_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.MapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.MapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.MapRequest)
    MergeFrom(*source);
  }
}

void MapRequest::MergeFrom(const MapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shard()) {
    _internal_mutable_shard()->::masterworker::FShard::MergeFrom(from._internal_shard());
  }
}

void MapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRequest::CopyFrom(const MapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRequest::IsInitialized() const {
  return true;
}

void MapRequest::InternalSwap(MapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(shard_, other->shard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReduceRequest::_Internal {
 public:
  static const ::masterworker::FilePaths& paths(const ReduceRequest* msg);
};

const ::masterworker::FilePaths&
ReduceRequest::_Internal::paths(const ReduceRequest* msg) {
  return *msg->paths_;
}
ReduceRequest::ReduceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.ReduceRequest)
}
ReduceRequest::ReduceRequest(const ReduceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_out_dir().empty()) {
    out_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_out_dir(), 
      GetArena());
  }
  if (from._internal_has_paths()) {
    paths_ = new ::masterworker::FilePaths(*from.paths_);
  } else {
    paths_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:masterworker.ReduceRequest)
}

void ReduceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReduceRequest_masterworker_2eproto.base);
  out_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&paths_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&paths_)) + sizeof(id_));
}

ReduceRequest::~ReduceRequest() {
  // @@protoc_insertion_point(destructor:masterworker.ReduceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReduceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  out_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paths_;
}

void ReduceRequest::ArenaDtor(void* object) {
  ReduceRequest* _this = reinterpret_cast< ReduceRequest* >(object);
  (void)_this;
}
void ReduceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReduceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReduceRequest& ReduceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReduceRequest_masterworker_2eproto.base);
  return *internal_default_instance();
}


void ReduceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.ReduceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_dir_.ClearToEmpty();
  if (GetArena() == nullptr && paths_ != nullptr) {
    delete paths_;
  }
  paths_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReduceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .masterworker.FilePaths paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string out_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_out_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.ReduceRequest.out_dir"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReduceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.ReduceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .masterworker.FilePaths paths = 2;
  if (this->has_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::paths(this), target, stream);
  }

  // string out_dir = 3;
  if (this->out_dir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_out_dir().data(), static_cast<int>(this->_internal_out_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.ReduceRequest.out_dir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_out_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.ReduceRequest)
  return target;
}

size_t ReduceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.ReduceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string out_dir = 3;
  if (this->out_dir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_out_dir());
  }

  // .masterworker.FilePaths paths = 2;
  if (this->has_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paths_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReduceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.ReduceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReduceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReduceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.ReduceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.ReduceRequest)
    MergeFrom(*source);
  }
}

void ReduceRequest::MergeFrom(const ReduceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.ReduceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.out_dir().size() > 0) {
    _internal_set_out_dir(from._internal_out_dir());
  }
  if (from.has_paths()) {
    _internal_mutable_paths()->::masterworker::FilePaths::MergeFrom(from._internal_paths());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ReduceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.ReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReduceRequest::CopyFrom(const ReduceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.ReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReduceRequest::IsInitialized() const {
  return true;
}

void ReduceRequest::InternalSwap(ReduceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  out_dir_.Swap(&other->out_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReduceRequest, id_)
      + sizeof(ReduceRequest::id_)
      - PROTOBUF_FIELD_OFFSET(ReduceRequest, paths_)>(
          reinterpret_cast<char*>(&paths_),
          reinterpret_cast<char*>(&other->paths_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReduceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FilePaths::_Internal {
 public:
};

FilePaths::FilePaths(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  f_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.FilePaths)
}
FilePaths::FilePaths(const FilePaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      f_name_(from.f_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:masterworker.FilePaths)
}

void FilePaths::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilePaths_masterworker_2eproto.base);
}

FilePaths::~FilePaths() {
  // @@protoc_insertion_point(destructor:masterworker.FilePaths)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilePaths::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FilePaths::ArenaDtor(void* object) {
  FilePaths* _this = reinterpret_cast< FilePaths* >(object);
  (void)_this;
}
void FilePaths::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilePaths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilePaths& FilePaths::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilePaths_masterworker_2eproto.base);
  return *internal_default_instance();
}


void FilePaths::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.FilePaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilePaths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string f_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.FilePaths.f_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilePaths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.FilePaths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string f_name = 1;
  for (int i = 0, n = this->_internal_f_name_size(); i < n; i++) {
    const auto& s = this->_internal_f_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.FilePaths.f_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.FilePaths)
  return target;
}

size_t FilePaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.FilePaths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string f_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f_name_.size());
  for (int i = 0, n = f_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      f_name_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilePaths::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.FilePaths)
  GOOGLE_DCHECK_NE(&from, this);
  const FilePaths* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilePaths>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.FilePaths)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.FilePaths)
    MergeFrom(*source);
  }
}

void FilePaths::MergeFrom(const FilePaths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.FilePaths)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f_name_.MergeFrom(from.f_name_);
}

void FilePaths::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.FilePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilePaths::CopyFrom(const FilePaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.FilePaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePaths::IsInitialized() const {
  return true;
}

void FilePaths::InternalSwap(FilePaths* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  f_name_.InternalSwap(&other->f_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePaths::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MasterRequest::_Internal {
 public:
  static const ::masterworker::MapRequest& map_request(const MasterRequest* msg);
  static const ::masterworker::ReduceRequest& reduce_request(const MasterRequest* msg);
};

const ::masterworker::MapRequest&
MasterRequest::_Internal::map_request(const MasterRequest* msg) {
  return *msg->map_request_;
}
const ::masterworker::ReduceRequest&
MasterRequest::_Internal::reduce_request(const MasterRequest* msg) {
  return *msg->reduce_request_;
}
MasterRequest::MasterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.MasterRequest)
}
MasterRequest::MasterRequest(const MasterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phase().empty()) {
    phase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phase(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  if (from._internal_has_map_request()) {
    map_request_ = new ::masterworker::MapRequest(*from.map_request_);
  } else {
    map_request_ = nullptr;
  }
  if (from._internal_has_reduce_request()) {
    reduce_request_ = new ::masterworker::ReduceRequest(*from.reduce_request_);
  } else {
    reduce_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.MasterRequest)
}

void MasterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MasterRequest_masterworker_2eproto.base);
  phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&map_request_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reduce_request_) -
      reinterpret_cast<char*>(&map_request_)) + sizeof(reduce_request_));
}

MasterRequest::~MasterRequest() {
  // @@protoc_insertion_point(destructor:masterworker.MasterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MasterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_request_;
  if (this != internal_default_instance()) delete reduce_request_;
}

void MasterRequest::ArenaDtor(void* object) {
  MasterRequest* _this = reinterpret_cast< MasterRequest* >(object);
  (void)_this;
}
void MasterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MasterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterRequest& MasterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterRequest_masterworker_2eproto.base);
  return *internal_default_instance();
}


void MasterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.MasterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phase_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArena() == nullptr && map_request_ != nullptr) {
    delete map_request_;
  }
  map_request_ = nullptr;
  if (GetArena() == nullptr && reduce_request_ != nullptr) {
    delete reduce_request_;
  }
  reduce_request_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .masterworker.MapRequest map_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .masterworker.ReduceRequest reduce_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reduce_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_phase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.MasterRequest.phase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.MasterRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.MasterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .masterworker.MapRequest map_request = 1;
  if (this->has_map_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_request(this), target, stream);
  }

  // .masterworker.ReduceRequest reduce_request = 2;
  if (this->has_reduce_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reduce_request(this), target, stream);
  }

  // string phase = 3;
  if (this->phase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phase().data(), static_cast<int>(this->_internal_phase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MasterRequest.phase");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_phase(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.MasterRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.MasterRequest)
  return target;
}

size_t MasterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.MasterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phase = 3;
  if (this->phase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phase());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .masterworker.MapRequest map_request = 1;
  if (this->has_map_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_request_);
  }

  // .masterworker.ReduceRequest reduce_request = 2;
  if (this->has_reduce_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reduce_request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.MasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.MasterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.MasterRequest)
    MergeFrom(*source);
  }
}

void MasterRequest::MergeFrom(const MasterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.MasterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phase().size() > 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.has_map_request()) {
    _internal_mutable_map_request()->::masterworker::MapRequest::MergeFrom(from._internal_map_request());
  }
  if (from.has_reduce_request()) {
    _internal_mutable_reduce_request()->::masterworker::ReduceRequest::MergeFrom(from._internal_reduce_request());
  }
}

void MasterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.MasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterRequest::CopyFrom(const MasterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.MasterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterRequest::IsInitialized() const {
  return true;
}

void MasterRequest::InternalSwap(MasterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phase_.Swap(&other->phase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterRequest, reduce_request_)
      + sizeof(MasterRequest::reduce_request_)
      - PROTOBUF_FIELD_OFFSET(MasterRequest, map_request_)>(
          reinterpret_cast<char*>(&map_request_),
          reinterpret_cast<char*>(&other->map_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkerResponse::_Internal {
 public:
  static const ::masterworker::FilePaths& paths(const WorkerResponse* msg);
};

const ::masterworker::FilePaths&
WorkerResponse::_Internal::paths(const WorkerResponse* msg) {
  return *msg->paths_;
}
WorkerResponse::WorkerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.WorkerResponse)
}
WorkerResponse::WorkerResponse(const WorkerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_paths()) {
    paths_ = new ::masterworker::FilePaths(*from.paths_);
  } else {
    paths_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.WorkerResponse)
}

void WorkerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerResponse_masterworker_2eproto.base);
  paths_ = nullptr;
}

WorkerResponse::~WorkerResponse() {
  // @@protoc_insertion_point(destructor:masterworker.WorkerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete paths_;
}

void WorkerResponse::ArenaDtor(void* object) {
  WorkerResponse* _this = reinterpret_cast< WorkerResponse* >(object);
  (void)_this;
}
void WorkerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerResponse& WorkerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerResponse_masterworker_2eproto.base);
  return *internal_default_instance();
}


void WorkerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.WorkerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && paths_ != nullptr) {
    delete paths_;
  }
  paths_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .masterworker.FilePaths paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.WorkerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .masterworker.FilePaths paths = 1;
  if (this->has_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::paths(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.WorkerResponse)
  return target;
}

size_t WorkerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.WorkerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .masterworker.FilePaths paths = 1;
  if (this->has_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paths_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.WorkerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.WorkerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.WorkerResponse)
    MergeFrom(*source);
  }
}

void WorkerResponse::MergeFrom(const WorkerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.WorkerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_paths()) {
    _internal_mutable_paths()->::masterworker::FilePaths::MergeFrom(from._internal_paths());
  }
}

void WorkerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.WorkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerResponse::CopyFrom(const WorkerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.WorkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerResponse::IsInitialized() const {
  return true;
}

void WorkerResponse::InternalSwap(WorkerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(paths_, other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::masterworker::FShard* Arena::CreateMaybeMessage< ::masterworker::FShard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::FShard >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ShardInfo* Arena::CreateMaybeMessage< ::masterworker::ShardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ShardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MapRequest* Arena::CreateMaybeMessage< ::masterworker::MapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::ReduceRequest* Arena::CreateMaybeMessage< ::masterworker::ReduceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::ReduceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::FilePaths* Arena::CreateMaybeMessage< ::masterworker::FilePaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::FilePaths >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::MasterRequest* Arena::CreateMaybeMessage< ::masterworker::MasterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::MasterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::WorkerResponse* Arena::CreateMaybeMessage< ::masterworker::WorkerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::WorkerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
